---
import rssParser from 'rss-parser';
import Center from '../components/Center.astro';
import PostCard from '../components/PostCard.astro';
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

const astroPosts = await getCollection('blog');
astroPosts.sort(
    (a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime()
);

const parser = new rssParser({
    customFields: {
        item: ['content:encoded']
    },
});

async function getSubstackPosts() {
    try {
        const res = await fetch('https://froppii.substack.com/feed', {
            headers: {
                'User-Agent': 
                    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
                Accept: 'application/rss+xml, application/xml',  
            },
        });

        const xml = await res.text();
        const feed = await parser.parseString(xml);

        return feed.items.map((post: any) => ({
            title: post.title,
            url: post.link,
            image: post.enclosure?.url ?? '/default-substack.png',
            description: post.contentSnipper ?? '',
            datePublished: post.pubDate ? new Date(post.pubDate) : new Date(),
            source: 'substack',
        }));
    } catch (err) {
        console.error('substack fetch error:', err);
        return [];
    }
}

const substackPosts = await getSubstackPosts();

const formattedAstroPosts = astroPosts.map((post) => ({
    title: post.data.title,
    url: `/blog/${post.slug}`,
    image: post.data.image?.url ?? '/default-astro.png',
    description: post.data.description,
    datePublished: new Date(post.data.pubDate),
    source: 'astro',
}));

const allPosts = [...formattedAstroPosts, ...substackPosts].sort(
    (a, b) => b.datePublished.getTime() - a.datePublished.getTime()
);
---

<BaseLayout title="blog">
    <Center>
        <h1>Blog</h1>
        <p>hey there!</p>
        <section class='posts'>
            {allPosts.map((post) => (
                <PostCard
                    title={post.title}
                    url={post.url}
                    description={post.description}
                    datePublished={post.datePublished}
                />
            ))}
        </section>
    </Center>
</BaseLayout>

<style>
    .posts {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        margin-top: 1.rem;
    }
</style>